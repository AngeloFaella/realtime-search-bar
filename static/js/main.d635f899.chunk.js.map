{"version":3,"sources":["components/Quote.js","components/SearchBar.js","apis/animeChan.js","components/App.js","index.js"],"names":["Quote","quote","className","character","anime","SearchBar","onSearchSubmit","clearResults","useState","term","setTerm","debouncedTerm","setDebouncedTerm","useEffect","timer","setTimeout","clearTimeout","type","placeholder","onChange","e","target","value","requestQuotes","_","memoize","title","a","fetch","res","status","json","quotesArray","App","quotes","setQuotes","noResults","setNoResults","console","log","toLowerCase","length","renderedQuotes","map","i","ReactDOM","render","document","getElementById"],"mappings":"kTAoBeA,EAhBD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZ,OACI,sBAAKC,UAAU,kBAAf,UACE,oBAAGA,UAAU,QAAb,cACID,EAAMA,MADV,OAGA,oBAAGC,UAAU,eAAb,qBAEE,uBAAMA,UAAU,YAAhB,cAA8BD,EAAME,UAApC,OAFF,OAIE,uBAAMD,UAAU,YAAhB,cAA8BD,EAAMG,gBCsBjCC,G,MAhCG,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,aAChC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,mBAASC,GAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KAkBA,OAfAC,qBAAU,WACN,IAAMC,EAAQC,YAAW,kBAAML,EAAQC,KAAgB,KACvD,OAAO,kBAAMK,aAAaF,MAC3B,CAACH,IAGJE,qBAAU,WACM,KAATJ,EACCH,EAAeG,GAGfF,MAEL,CAACE,IAGF,qBAAKP,UAAU,YAAf,SACE,uBACIA,UAAU,kBACVe,KAAK,OACLC,YAAY,uBACZC,SAAU,SAAAC,GAAC,OAAIR,EAAiBQ,EAAEC,OAAOC,QACzCA,MAAOX,Q,OC7BNY,E,OAAgBC,EAAEC,QAAF,uCAAU,WAAMC,GAAN,iBAAAC,EAAA,sEACjBC,MAAM,uDAAD,OAAwDF,IAD5C,UAEjB,OADZG,EAD6B,QAE5BC,OAF4B,yCAEL,IAFK,uBAITD,EAAIE,OAJK,cAI7BC,EAJ6B,yBAK5BA,GAL4B,2CAAV,uDC+CdC,EA1CH,WACV,MAA4BzB,mBAAS,IAArC,mBAAO0B,EAAP,KAAeC,EAAf,KACA,EAAkC3B,oBAAS,GAA3C,mBAAO4B,EAAP,KAAkBC,EAAlB,KAEM/B,EAAc,uCAAG,WAAMG,GAAN,eAAAkB,EAAA,6DACrBW,QAAQC,IAAI,qBAAsB9B,GADb,SAEKc,EAAcd,EAAK+B,eAFxB,OAEfR,EAFe,OAGrBK,EAAoC,IAAvBL,EAAYS,QACzBN,EAAUH,GAJW,2CAAH,sDASdU,EAAiBR,EAAOS,KAAI,SAAC1C,EAAO2C,GACxC,OAAO,cAAC,EAAD,CAAO3C,MAAOA,GAAY2C,MAGnC,OACE,sBAAK1C,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,2BAEA,qBAAKA,UAAU,uBAAf,SACE,oBAAGA,UAAU,aAAb,8CACmC,sBAAMA,UAAU,YAAhB,mBADnC,SAKF,cAAC,EAAD,CAAWI,eAAgBA,EAAgBC,aAhB1B,kBAAM4B,EAAU,OAkB/BC,GACA,mBAAGlC,UAAU,aAAb,+BAIF,qBAAKA,UAAU,eAAf,SACGwC,QCpCTG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d635f899.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../styles/Quote.css';\r\n\r\nconst Quote = ({quote}) => {\r\n    return (\r\n        <div className='quote-container'>\r\n          <p className=\"quote\">\r\n            \"{quote.quote}\"\r\n          </p>\r\n          <p className=\"quote-author\">\r\n            Quote by\r\n            <span className='highlight'> {quote.character} </span>\r\n            from\r\n            <span className='highlight'> {quote.anime}</span>\r\n          </p>\r\n        </div>\r\n      );\r\n};\r\n\r\nexport default Quote;\r\n\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport '../styles/SearchBar.css'\r\n\r\nconst SearchBar = ({onSearchSubmit, clearResults}) => {\r\n    const [term, setTerm] = useState('');\r\n    const [debouncedTerm, setDebouncedTerm] = useState(term);\r\n\r\n    // update 'term' value after 1 second from the last update of 'debouncedTerm'\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => setTerm(debouncedTerm), 1000);\r\n        return () => clearTimeout(timer);\r\n    }, [debouncedTerm])\r\n\r\n    // submit a new search\r\n    useEffect(() => {\r\n        if(term !== ''){\r\n            onSearchSubmit(term);\r\n        }\r\n        else{\r\n            clearResults();\r\n        }\r\n    }, [term]);\r\n\r\n    return (\r\n      <div className='searchbar'>\r\n        <input \r\n            className='searchbar-input' \r\n            type='text' \r\n            placeholder=\"Search by title. . .\"\r\n            onChange={e => setDebouncedTerm(e.target.value)}\r\n            value={debouncedTerm}/>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n\r\n","import _ from 'lodash';\r\n\r\nexport const requestQuotes = _.memoize(async title => {\r\n    const res = await fetch(`https://animechan.vercel.app/api/quotes/anime?title=${title}`)\r\n    if(res.status !== 200) return [];\r\n\r\n    const quotesArray = await res.json();\r\n    return quotesArray;\r\n});\r\n","import React, { useState } from 'react';\n\nimport '../styles/App.css';\nimport Quote from './Quote';\nimport SearchBar from './SearchBar';\nimport { requestQuotes } from '../apis/animeChan';\n\nconst App = () => {\n  const [quotes, setQuotes] = useState([]);\n  const [noResults, setNoResults] = useState(false);\n\n  const onSearchSubmit = async term => {\n    console.log('New Search submit:', term);\n    const quotesArray = await requestQuotes(term.toLowerCase());\n    setNoResults(quotesArray.length === 0);\n    setQuotes(quotesArray);\n  };\n\n  const clearResults = () => setQuotes([]);\n\n  const renderedQuotes = quotes.map((quote, i) => {\n    return <Quote quote={quote} key={i} />\n  })\n\n  return (\n    <div className='app'>\n      <h1 className='title'>Search Quotes</h1>\n\n      <div className='disclaimer-container'>\n        <p className='disclaimer'>\n          Get 10 quotes from your favorite <span className='highlight'>anime</span>!\n        </p>\n      </div>\n      \n      <SearchBar onSearchSubmit={onSearchSubmit} clearResults={clearResults}/>\n\n      { noResults &&\n        <p className='no-results'>\n          No results found.\n        </p>\n      }\n      <div className='main-content'>\n        {renderedQuotes}\n      </div>\n\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}